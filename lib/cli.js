const CLI = require('clui');
const Spinner = CLI.Spinner;
const inquirer = require('./inquirer');
const ssh = require('./ssh');
const ssh_gen = require('./ssh-gen');
const chalk = require('chalk');
const fs = require('fs');
const path = require('path');
const os = require('os');
const chmod = require('chmod.js');

module.exports = {
    run: async () => {
        let status
        const credentials = await inquirer.askRemoteCredentials();

        const connection = new ssh({
            host: credentials.host,
            port: credentials.port,
            username: credentials.username,
            password: credentials.password
        });

        status = new Spinner('Authenticating you, please wait...');
        status.start();
        try {
            const connectionState = await connection.test();
            if (!connectionState) { throw new Error('Failed to connect to server!'); }
            status.stop();
        }catch(e) {
            await connection.close();
            status.stop();
            console.log(chalk.red(e.message));
            return;
        }

        status = new Spinner('Adding public key, please wait...');
        status.start();
        try {
            const generateState = await connection.execTrim('grep -rl "Generated by VSCode SSH Utils" ~/.ssh/authorized_keys');
            status.stop();
            if (generateState.length > 0) { throw new Error('Server already has connection generated!\n\t(multiple connections in feature...)'); }
        }catch(e) {
            status.stop();
            await connection.close();
            console.log(chalk.red(e.toString()));
            return;
        }
        if (!credentials.hostname) {
            status = new Spinner('Getting remote hostname, please wait...');
            status.start();
            const remoteHostname = await connection.execTrim('hostname');
            status.stop();
            credentials.hostname = remoteHostname
        }

        const hostnameMin = credentials.hostname.replace(/[^a-zA-Z0-9]/g,'_');

        status = new Spinner('Generating key pair, please wait...');
        status.start();
        try {
            const key = await ssh_gen.genKey(hostnameMin);
            status.stop();
        }catch(e) {
            await connection.close();
            status.stop();
            console.log(chalk.red(e.toString()));
        }

        status = new Spinner('Adding public key, please wait...');
        status.start();
        try {
            await connection.exec('mkdir -p ~/.ssh/');
            await connection.exec('touch ~/.ssh/authorized_keys');
            await connection.exec('touch ~/.ssh/'+hostnameMin+'.pub');
            let remotePath = await connection.exec('ls ~/.ssh/'+hostnameMin+'.pub');
            remotePath = remotePath.trim();
            await connection.uploadContent(remotePath, key.public);
            await connection.exec('cat ~/.ssh/'+hostnameMin+'.pub >> ~/.ssh/authorized_keys');
            await connection.exec('rm ~/.ssh/'+hostnameMin+'.pub');
            status.stop();
        }catch(e) {
            await connection.close();
            status.stop();
            console.log(chalk.red(e.toString()));
        }

        status = new Spinner('Closing connection, please wait...');
        status.start();
        await connection.close();
        status.stop();

        chmod.js


        let sshConfigPath = path.join(os.homedir(), '.ssh', "config");
        var wstream = fs.createWriteStream(sshConfigPath, {flags:'a'});
        wstream.write("Host "+hostnameMin+"\n");
        wstream.write("\tHostName "+credentials.host+"\n");
        wstream.write("\tUser "+credentials.username+"\n");
        wstream.write("\tPort "+credentials.port+"\n");
        wstream.write("\tIdentityFile "+key.location+"\n");
        wstream.end();

        await chmod( path.join(os.homedir(), '.ssh') );

        console.log(chalk.green("Done!"));
    }
};
